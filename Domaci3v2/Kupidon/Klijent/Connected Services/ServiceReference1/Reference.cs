//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Korisnik", Namespace="http://schemas.datacontract.org/2004/07/Kupidon")]
    public partial class Korisnik : object, System.ComponentModel.INotifyPropertyChanged
    {
        
        private string BrojTelefonaField;
        
        private int GodineField;
        
        private string GradField;
        
        private string ImeField;
        
        private string PrezimeField;
        
        private bool PrimioPorukuField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrojTelefona
        {
            get
            {
                return this.BrojTelefonaField;
            }
            set
            {
                if ((object.ReferenceEquals(this.BrojTelefonaField, value) != true))
                {
                    this.BrojTelefonaField = value;
                    this.RaisePropertyChanged("BrojTelefona");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Godine
        {
            get
            {
                return this.GodineField;
            }
            set
            {
                if ((this.GodineField.Equals(value) != true))
                {
                    this.GodineField = value;
                    this.RaisePropertyChanged("Godine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Grad
        {
            get
            {
                return this.GradField;
            }
            set
            {
                if ((object.ReferenceEquals(this.GradField, value) != true))
                {
                    this.GradField = value;
                    this.RaisePropertyChanged("Grad");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ime
        {
            get
            {
                return this.ImeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.ImeField, value) != true))
                {
                    this.ImeField = value;
                    this.RaisePropertyChanged("Ime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Prezime
        {
            get
            {
                return this.PrezimeField;
            }
            set
            {
                if ((object.ReferenceEquals(this.PrezimeField, value) != true))
                {
                    this.PrezimeField = value;
                    this.RaisePropertyChanged("Prezime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PrimioPoruku
        {
            get
            {
                return this.PrimioPorukuField;
            }
            set
            {
                if ((this.PrimioPorukuField.Equals(value) != true))
                {
                    this.PrimioPorukuField = value;
                    this.RaisePropertyChanged("PrimioPoruku");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IPub")]
    public interface IPub
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPub/sendLetters")]
        void sendLetters(string poruka);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPub/sendLetters")]
        System.Threading.Tasks.Task sendLettersAsync(string poruka);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IPubChannel : ServiceReference1.IPub, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class PubClient : System.ServiceModel.ClientBase<ServiceReference1.IPub>, ServiceReference1.IPub
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PubClient() : 
                base(PubClient.GetDefaultBinding(), PubClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPub.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PubClient(EndpointConfiguration endpointConfiguration) : 
                base(PubClient.GetBindingForEndpoint(endpointConfiguration), PubClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PubClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PubClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PubClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PubClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PubClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public void sendLetters(string poruka)
        {
            base.Channel.sendLetters(poruka);
        }
        
        public System.Threading.Tasks.Task sendLettersAsync(string poruka)
        {
            return base.Channel.sendLettersAsync(poruka);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPub))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPub))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:50927/Kupidon.svc/pub");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PubClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPub);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PubClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPub);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPub,
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ISub", CallbackContract=typeof(ServiceReference1.ISubCallback))]
    public interface ISub
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISub/initSinglePerson")]
        void initSinglePerson(ServiceReference1.Korisnik korisnik);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISub/initSinglePerson")]
        System.Threading.Tasks.Task initSinglePersonAsync(ServiceReference1.Korisnik korisnik);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ISubCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ISub/OnNotified")]
        void OnNotified(string message, ServiceReference1.Korisnik[] korisnici);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface ISubChannel : ServiceReference1.ISub, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class SubClientBase : System.ServiceModel.DuplexClientBase<ServiceReference1.ISub>, ServiceReference1.ISub
    {
        
        public SubClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public void initSinglePerson(ServiceReference1.Korisnik korisnik)
        {
            base.Channel.initSinglePerson(korisnik);
        }
        
        public System.Threading.Tasks.Task initSinglePersonAsync(ServiceReference1.Korisnik korisnik)
        {
            return base.Channel.initSinglePersonAsync(korisnik);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
    }
    
    public class OnNotifiedReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public OnNotifiedReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public string message
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public ServiceReference1.Korisnik[] korisnici
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((ServiceReference1.Korisnik[])(this.results[1]));
            }
        }
    }
    
    public partial class SubClient : SubClientBase
    {
        
        public SubClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new SubClientCallback(), binding, remoteAddress)
        {
        }
        
        private SubClient(SubClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<OnNotifiedReceivedEventArgs> OnNotifiedReceived;
        
        private void OnOnNotifiedReceived(object state)
        {
            if ((this.OnNotifiedReceived != null))
            {
                object[] results = ((object[])(state));
                this.OnNotifiedReceived(this, new OnNotifiedReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class SubClientCallback : object, ISubCallback
        {
            
            private SubClient proxy;
            
            public void Initialize(SubClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void OnNotified(string message, ServiceReference1.Korisnik[] korisnici)
            {
                this.proxy.OnOnNotifiedReceived(new object[] {
                            message,
                            korisnici});
            }
        }
    }
}
